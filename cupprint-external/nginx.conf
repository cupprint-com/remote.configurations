user www-data;
worker_processes 4;
pid /var/run/nginx.pid;

events {
	worker_connections 4096;
	multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 2;
	types_hash_max_size 2048;
	server_tokens off;
        client_max_body_size 20M;
        fastcgi_buffers 16 20M;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;
	gzip_disable "msie6";

	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 6;
	gzip_buffers 16 32k;
	gzip_http_version 1.1;
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# nginx-naxsi config
	##
	# Uncomment it if you installed nginx-naxsi
	##

	#include /etc/nginx/naxsi_core.rules;

	##
	# nginx-passenger config
	##
	# Uncomment it if you installed nginx-passenger
	##
	
	#passenger_root /usr;
	#passenger_ruby /usr/bin/ruby;

	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;

  	# config to don't allow the browser to render the page inside an frame or iframe
  	# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
  	# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
  	# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
  	add_header X-Frame-Options SAMEORIGIN;
   
  	# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
  	# to disable content-type sniffing on some browsers.
  	# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  	# currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
  	# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
  	# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
  	add_header X-Content-Type-Options nosniff;
   
  	# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
  	# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for 
  	# this particular website if it was disabled by the user.
  	# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  	add_header X-XSS-Protection "1; mode=block";
   
  	# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
  	# you can tell the browser that it can only download content from the domains you explicitly allow
  	# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
  	# https://www.owasp.org/index.php/Content_Security_Policy
  	# I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
  	# directives for css and js(if you have inline css or js, you will need to keep it too).
  	# more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
#  	add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' http://www.if-bi.com http://ajax.googleapis.com  https://ajax.googleapis.com https://maps.googleapis.com https://maps.gstatic.com https://maps.google.com https://www.google.com https://ajax.googleapis.com https://ssl.google-analytics.com http://www.google-analytics.com  https://assets.zendesk.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com https://assets.zendesk.com http://www.if-bi.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com http://fonts.googleapis.com https://assets.zendesk.com http://www.if-bi.com http://if-bi.com; font-src 'self' https://themes.googleusercontent.com http://themes.googleusercontent.com ; frame-src 'self' http://www.if-bi.com https://www.youtube-nocookie.com https://www.youtube.com https://assets.zendesk.com https://www.facebook.com https://s-static.ak.facebook.com https://tautt.zendesk.com; object-src 'self'";

	## Include the upstream servers for PHP FastCGI handling config.
    	## This one uses the FCGI process listening on TCP sockets.
    	#include upstream_phpcgi_tcp.conf;

    	## Include the upstream servers for PHP FastCGI handling
    	## configuration. This setup uses UNIX sockets for talking with the
    	## upstream.
    	#include upstream_phpcgi_unix.conf;

    	## Include the map to block HTTP methods.
    	# include map_block_http_methods.conf;


	### SET the path to the .dat file used for determining the visitor's country from the IP-address ###
  	geoip_country  /etc/nginx/geoip/GeoIP.dat; # the country IP database
        geoip_city     /etc/nginx/geoip/GeoLiteCity.dat; # the cit
}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
# 
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
# 
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
# 
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}
